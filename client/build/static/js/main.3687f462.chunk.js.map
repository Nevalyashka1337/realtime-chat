{"version":3,"sources":["components/preloader/Preloader.jsx","components/preloader/index.js","components/error/Error.jsx","components/error/index.js","components/chat-header/ChatHeader.jsx","components/chat-header/index.js","components/chat-display/ChatDisplay.jsx","components/chat-display/index.js","components/chat-form/index.js","components/chat-form/ChatForm.jsx","components/chat/Chat.jsx","components/chat/index.js","components/app/App.js","components/app/index.js","serviceWorker.js","reducer.js","store.js","index.js"],"names":["Preloader","react_default","a","createElement","className","Error","ChatHeader","connect","state","online","_ref","ChatDisplay","scrollToBottom","_this","messagesEnd","scrollIntoView","behavior","this","_this2","props","messageList","map","text","id","Fragment","key","style","float","clear","ref","el","React","Component","message","ChatForm","msg","handleMsg","target","setState","value","handleSubmit","e","preventDefault","length","onSendMsg","onSubmit","type","placeholder","onChange","Chat","chat_header","chat_display","chat_form","URL","App","sendMessage","ws","send","_this$props","setStatus","setOnline","addMessage","WebSocket","concat","onopen","currentTarget","readyState","onclose","_ref2","onmessage","_ref3","data","res","JSON","parse","payload","status","preloader","chat","error","dispatch","statusCode","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initState","reducer","arguments","undefined","action","Object","objectSpread","toConsumableArray","store","createStore","devToolsEnhancer","ReactDOM","render","es","app","document","getElementById","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3687f462.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Preloader.css'\r\n\r\nfunction Preloader() {\r\n\treturn (\r\n\t\t<div className=\"preloader-wrapper\">\r\n\t\t\t<p>Loading...</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Preloader\r\n","import Preloader from './Preloader'\r\n\r\nexport default Preloader","import React from 'react'\r\nimport './Error.css'\r\n\r\nfunction Error() {\r\n\treturn (\r\n\t\t<div className=\"error-wrapper\">\r\n\t\t\t<p>Error</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Error\r\n","import Error from './Error'\r\n\r\nexport default Error","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction ChatHeader({ online }) {\r\n\treturn (\r\n\t\t<div className=\"chat-header\">\r\n\t\t\t<span className=\"status-dot\"></span>\r\n\t\t\t<p>{online} online</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tonline: state.online\r\n})\r\n\r\nexport default connect(\r\n\tmapStateToProps\r\n)(ChatHeader)\r\n","import ChatHeader from './ChatHeader'\r\n\r\nexport default ChatHeader","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass ChatDisplay extends React.Component {\r\n\t\r\n\tcomponentDidUpdate() {\r\n\t\tthis.scrollToBottom()\r\n\t}\r\n\t\r\n\tscrollToBottom = () => {\r\n\t\tthis.messagesEnd.scrollIntoView({ behavior: 'smooth' })\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"chat-display\">\r\n\t\t\t\t{this.props.messageList.map(({ text, id }) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<React.Fragment key={id}>\r\n\t\t\t\t\t\t\t<p>{text}</p><br/>\r\n\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t\t<div style={{ float:\"left\", clear: \"both\" }}\r\n\t\t\t\t\tref={el => this.messagesEnd = el }>\r\n        </div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tmessageList: state.message\r\n})\r\n\r\nexport default connect(\r\n\tmapStateToProps\r\n)(ChatDisplay)\r\n","import ChatDisplay from './ChatDisplay'\r\n\r\nexport default ChatDisplay","import ChatForm from './ChatForm'\r\n\r\nexport default ChatForm","import React from 'react'\r\n\r\nclass ChatForm extends React.Component {\r\n\t\r\n\tstate = {\r\n\t\tmsg: ''\r\n\t}\r\n\r\n\thandleMsg = ({ target }) => {\r\n\t\tthis.setState({\r\n\t\t\tmsg: target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleSubmit = e => {\r\n\t\te.preventDefault()\r\n\t\tconst { msg } = this.state\r\n\t\tif ( msg.length ) {\r\n\t\t\tthis.props.onSendMsg(msg)\r\n\t\t\tthis.setState({\r\n\t\t\t\tmsg: ''\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"chat-form\">\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input type=\"input\" placeholder=\"write a message...\"\r\n\t\t\t\t\tonChange={this.handleMsg} value={this.state.msg}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ChatForm\r\n","import React from 'react'\r\nimport './Chat.css'\r\nimport ChatHeader from '../chat-header'\r\nimport ChatDisplay from '../chat-display'\r\nimport ChatForm from '../chat-form'\r\n\r\nfunction Chat({ onSendMsg }) {\r\n\treturn (\r\n\t\t<div className=\"chat-wrapper\">\r\n\t\t\t<div className=\"chat-pager\">\r\n\t\t\t\t<ChatHeader/>\r\n\t\t\t\t<div className=\"chat-body\">\r\n\t\t\t\t\t<ChatDisplay/>\r\n\t\t\t\t\t<ChatForm onSendMsg={onSendMsg}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Chat\r\n","import Chat from './Chat'\r\n\r\nexport default Chat","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Preloader from '../preloader'\nimport Error from '../error'\nimport Chat from '../chat'\nimport './App.css'\n\nlet URL = ''\n\nif ( process.env.NODE_ENV === 'development' ) URL = 'ws://localhost:1337/'\nelse URL = 'ws://real-time-react-chat.herokuapp.com:1337'\n\nclass App extends Component {\n  \n  componentDidMount() {\n    const { setStatus, setOnline, addMessage } = this.props\n    this.ws = new WebSocket(`${URL}`)\n    this.ws.onopen = ({ currentTarget }) => setStatus(currentTarget.readyState)\n    this.ws.onclose = ({ currentTarget }) => setStatus(currentTarget.readyState)\n    this.ws.onmessage = ({ data }) => {\n      const res = JSON.parse(data)\n      if ( res.type === 'UPDATE_ONLINE' ) {\n        setOnline(res.payload)\n      } else if ( res.type === 'NEW_MESSAGE' ) {\n        addMessage(res.payload)\n      }\n    }\n  }\n\n  sendMessage = msg => {\n    this.ws.send(msg)\n  }\n\n  render() {\n    const { status } = this.props\n    return (\n      <>\n        { status === 0 && <Preloader/> }\n        { status === 1 && <Chat onSendMsg={this.sendMessage}/> }\n        { ( status === 2 || status === 3 ) && <Error/> }\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  status: state.status\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setStatus: statusCode => {\n    dispatch({ type: 'UPDATE_STATUS', payload: statusCode })\n  },\n  setOnline: online => {\n    dispatch({ type: 'UPDATE_ONLINE', payload: online })\n  },\n  addMessage: msg => {\n    dispatch({ type: 'NEW_MESSAGE', payload: msg })\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)","import App from './App'\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const initState = {\n\tonline: 0,\n\tmessage: [],\n\tstatus: 0\n}\n\nconst reducer = ( state = initState, action ) => {\n\tswitch (action.type) {\n\t\tcase 'UPDATE_ONLINE':\n\t\t\treturn { ...state, online: action.payload }\n\t\tcase 'NEW_MESSAGE':\n\t\t\treturn { ...state, message: [ ...state.message, action.payload ] }\n\t\tcase 'UPDATE_STATUS':\n\t\t\treturn { ...state, status: action.payload }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nexport default reducer","import { createStore } from 'redux'\r\nimport { devToolsEnhancer  } from 'redux-devtools-extension/logOnlyInProduction'\r\nimport reducer from './reducer'\r\n\r\nconst store = createStore(reducer, devToolsEnhancer())\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n, document.getElementById('root'))\n\nif ( process.env.NODE_ENV === 'development' ) serviceWorker.unregister();\nelse if ( process.env.NODE_ENV === 'production' ) serviceWorker.register()\n"],"sourceRoot":""}